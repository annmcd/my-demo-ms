<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ie.aib.msf</groupId>
  <artifactId>my-demo-ms</artifactId>
  <version>0.0.2-SNAPSHOT</version>
  <organization>
    <name>Allied Irish Bank PLC</name>
  </organization>
  <url>https://aib.ie</url>
  
  <properties>
       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  
  	<!--AMD start properties -->
		<!--<despipeline.version />-->
		<maven.surefire.plugin.version>2.4.3</maven.surefire.plugin.version>

		<project.scm.id>git-server</project.scm.id>
			
	<!--AMD Provide Sonar with the jacoco output -->
		<failFlag>true</failFlag> <!-- allows us to test pipeline with projects which contain inadequate quality standards and proceed regardless-->
		<jacoco-maven-plugin.version>0.7.2.201409121644</jacoco-maven-plugin.version>
		<failsafe.version>2.15</failsafe.version>
		<findbugs.version>3.0.4</findbugs.version>
		<sonar.jacoco.itReportPath>${project.build.directory}/jacoco-it.exec</sonar.jacoco.itReportPath> 
		<sonar.junit.reportsPath>${project.build.directory}/surefire-reports</sonar.junit.reportsPath>
		<sonar.jacoco.jar>${basedir}/lib/jacocoagent.jar</sonar.jacoco.jar>
  		<sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
   		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
   	    <sonar.language>java</sonar.language>
	    <sonar.exclusions>src/main/resources/**</sonar.exclusions>
	    <sonar.test.exclusions>src/java/test/java/**, src/test/java/resources/**, src/test/resources/**</sonar.test.exclusions>
	    <sonar.dynamic>reuseReports</sonar.dynamic> 

		<!-- Maximum number of classes that can be missed per project -->
		<max.classes.missed>1</max.classes.missed>
		<!--Target instruction coverage -->
		<min.instruction.coverage>0.95</min.instruction.coverage>
		<exclusion.suffix />
		<excludedPackage />
	
		<!--  Package which contains classes not included for code coverage calculation -->
		<!--<excludedPackage>ie/aib/msf/model/**/*</excludedPackage> -->
		<sonar.plugin.version>2.7.1</sonar.plugin.version>
		<sonar.login>admin</sonar.login>
		<sonar.password>admin</sonar.password>
		<sonar.host.url>admin</sonar.host.url>
		<project.properties.file />
		<!--AMD end property additions-->
  </properties>
  
  
  
  <scm>
   <connection>scm:git:https://github.com/annmcd/Demo.git</connection>
   <url>http://github.com/annmcd/Demo.git</url>
  <developerConnection>scm:git:https://github.com/annmcd/my-demo-ms.git</developerConnection>
 <!-- <developerConnection>scm:git:git@github.com:annmcd/Demo.git</developerConnection> -->
    <tag>HEAD</tag>
  </scm>
  
 
  <profiles>
  		<profile>
			<id>bugs-style-check</id>
			<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>2.9.1</version>
					<executions>
						<execution>
						<id>checkstyle</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<failOnViolation>${failFlag}</failOnViolation>
						</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>3.0.3</version>
					<configuration>
						<effort>Max</effort>
						<threshold>Low</threshold>
						<failOnError>${failFlag}</failOnError>
					</configuration>
					<executions>
						<execution>
							<id>analyze-compile</id>
							<phase>compile</phase>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		  </build>
		</profile>

  
  
	   <profile>
		<id>unit-tests</id>
			<build>
			<plugins>
			 <plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				   <version>${maven.surefire.plugin.version}</version>
					<executions>
					  <execution>
						<id>default-test</id>
						<phase>test</phase>
						<goals>
							  <goal>test</goal>
						</goals>
						<configuration>
							 <reuseForks>true</reuseForks>
							<forkCount>1C</forkCount>
						   <argLine>${surefireArgLine}</argLine>
						   
						  <skipTests>${skipTests}</skipTests>
						  <!--identify the unit tests -->
							<includes>
								<include>**/*Test.java</include>
							</includes>
							<excludes>
								<exclude>**/*IT.java</exclude>
								<exclude>**/model/*</exclude>
							</excludes> 
						</configuration>
					  </execution>
					</executions>
				</plugin>
				  <plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
					  <!-- pre-unit-test execution helps setting up some maven property,
						which will be used later by JaCoCo -->
						  <execution>
							<id>pre-unit-test</id>
							<goals>
								 <goal>prepare-agent</goal>
							</goals>
								<configuration>
									 <append>true</append>
									 <destFile>${project.build.directory}/jacoco-ut.exec</destFile>
									  <propertyName>surefireArgLine</propertyName> 
								</configuration>
						   </execution>
						   <execution>
							  <id>post-test</id>
							   <phase>test</phase>
							   <goals>
								  <goal>check</goal>
								  <goal>report</goal>
							   </goals>
							   <configuration>
								  <excludes>
									<exclude>**/IT*.java</exclude>
									<exclude>**/*IT.java</exclude>
									<exclude>**/model/*</exclude>
								   </excludes> 
								  <!-- output file with report data.session.executionRootDirectory -->
								  <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile> <!-- targets to the site folder the xml and html reports -->
								  <!-- output directory for the site HTML and xml reports. -->
								  <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
								   <rules>
									  <!--  Require overall instruction coverage of minInstructionCoverage %, and don't allow any classes to be missed -->
									  <rule>
										<element>BUNDLE</element>
										   <excludes>
											 <exclude>*IT</exclude>
											</excludes>
											<limits>
											  <limit>
												<counter>INSTRUCTION</counter>
												<value>COVEREDRATIO</value>
												<minimum>${min.instruction.coverage}</minimum>
											  </limit>
											  <limit>
												<counter>CLASS</counter>
												<value>MISSEDCOUNT</value>
												<!--The max number of classes that can have no code coverage per project-->
												<maximum>${max.classes.missed}</maximum>
											  </limit>
										   </limits>
									 </rule>
								</rules>
							   </configuration>
							</execution>
					 </executions>
				  </plugin>
			</plugins>
		  </build>
		</profile>
	
	
	   <profile>
		  <id>integration-tests</id>
	    	<build>
			<plugins>
			 <plugin>
				  <artifactId>maven-failsafe-plugin</artifactId>
					<version>${failsafe.version}</version>
					<executions>
					  <execution>
						   <id>integration-tests</id>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
							<configuration>
								<reuseForks>true</reuseForks>
								<forkCount>1C</forkCount>
								 <argLine>${failsafeArgLine}</argLine>
								  <skipTests>${skipTests}</skipTests>
								   <!--Identify the integration tests -->
									<includes>
										<include>**/*IT.java</include>
									</includes>
									<excludes>
										 <exclude>**/*Test.java</exclude>
										 <exclude>**/model/*</exclude>
									</excludes> 
									<argLine>${failsafeArgLine} -XX:PermSize=128m -XX:MaxPermSize=512m -XX:-UseSplitVerifier -noverify</argLine>
							</configuration>
						</execution>
					</executions>
				  </plugin>
				  <plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
					  <!-- pre-unit-test execution helps setting up some maven property,
						which will be used later by JaCoCo -->
					  <execution>
						<id>pre-integration-test</id>
						<goals>
						  <goal>prepare-agent</goal>
						</goals>
						<configuration>
							 <append>true</append>
							 <destFile>${project.build.directory}/jacoco-it.exec</destFile>
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					  </execution>
					  <execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>check</goal>
							<goal>report</goal>
						</goals>
						<configuration>
						 <excludes>
							<exclude>**/*Test.java</exclude>
							<exclude>**/model/*</exclude>
						  </excludes> 
						  <!-- output file with report data.session.executionRootDirectory -->
						  <dataFile>${project.build.directory}/jacoco-it.exec</dataFile> <!-- targets to the site folder the xml and html reports -->
						  <!-- output directory for the site HTML and xml reports. -->
						  <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						   <rules>
							  <rule>
								<element>BUNDLE</element>
								 <excludes>
								   <exclude>*Test</exclude>
								</excludes>
								<limits>
								  <limit>
									<counter>INSTRUCTION</counter>
									<value>COVEREDRATIO</value>
									<minimum>${min.instruction.coverage}</minimum>
								  </limit>
								</limits>
							  </rule>
							</rules>
					   </configuration>
					  </execution>
					 </executions>
				  </plugin>
				</plugins>
			</build>
		</profile>
	
		<profile>
		  <id>style-check</id>
			<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>2.9.1</version>
					<executions>
						<execution>
						<id>checkstyle</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<failOnViolation>true</failOnViolation>
						</configuration>
						</execution>
					</executions>
				</plugin> 
			 </plugins>
			</build>
		</profile>
	
	
	  <profile>
			<id>deploy-snapshot</id> 
			<build>
			
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.3</version>
		 
					  <executions>
						<execution>
							<phase>default-deploy</phase>
							<goals>
								<goal>deploy</goal>
							</goals>
							<configuration>
								<packaging>jar</packaging>
								<generatePom>true</generatePom>
								<url>${project.distributionManagement.snapshotRepository.url}</url>
								<artifactId>${project.artifactId}</artifactId>
								<groupId>${project.groupId}</groupId>
								<version>${project.version}</version>
								<file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file>
							</configuration>
					    </execution>
					  </executions>
				</plugin>
			</plugins>
		</build>
	  </profile>
	  
	  
	  
	 <profile>
		  <id>release-artefact</id> 
			<build>
			<plugins>
				
			  </plugins>
			</build>
		  </profile> 
		  
	</profiles>
	  	  

 
  <!-- Deployment to Nexus-->
  <distributionManagement>
    <snapshotRepository>
      <id>maven-snapshot-repository-Test</id>
      <name>maven-snapshots</name>
      <url>http://localhost:8082/repository/maven-snapshots/</url>
    </snapshotRepository>
   
   <repository>
      <id>maven-release-repository-Test</id>
      <name>maven-release</name>
      <url>http://localhost:8082/repository/maven-releases/</url>
    </repository>
  </distributionManagement>
 
  
  <build>
  	   <plugins>
	   <plugin>
		   <artifactId>maven-release-plugin</artifactId>
			<version>2.5.3</version>
			<configuration>
			<url>${project.distributionManagement.repository.url}</url> 
			<!--<tag>${releaseVer}</tag>
			<releaseVersion>${releaseVer}</releaseVersion>
			<developmentVersion>1.0.43</developmentVersion> -->
		   </configuration>
			<dependencies>
			  <dependency>
				 <groupId>org.apache.maven.scm</groupId>
				 <artifactId>maven-scm-provider-gitexe</artifactId>
				 <version>1.9.5</version>
				</dependency>
			</dependencies>
	    </plugin>
	   
	   
		 <plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>build-helper-maven-plugin</artifactId>
			<version>3.0.0</version>
		 </plugin>
	     <plugin>
	       	  <groupId>junit</groupId>
			  <artifactId>junit</artifactId>
			  <version>4.11</version>
	      </plugin> 
		  <plugin>
		    <groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<version>2.4</version>
		    <configuration>
			  <archive>
				<manifest>
				  <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
				  <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
				</manifest>
				 <manifestEntries>
				  <url>${project.url}</url>
				</manifestEntries>
			  </archive>
			</configuration>
		 </plugin>
     	 <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-install-plugin</artifactId>
			<version>2.4</version>
		  </plugin>
		  
	      <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-deploy-plugin</artifactId>
			<version>2.8</version>
		 </plugin>
		 
	
	 </plugins>
	
	<pluginManagement>
	   <plugins />
     </pluginManagement>   
    </build>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
 
  
</project>